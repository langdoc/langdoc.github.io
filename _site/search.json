[
  
    {
      "title"    : "Google Docs and Markdown",
      "category" : "",
      "tags"     : "R, workflows",
      "url"      : "/2015/06/22/google_docs.html",
      "date"     : "2015-06-22 01:55:14 +0200",
      "content"  : "We were recently writing a small abstract together with a few colleagues (Michael Rießler and Hanna Thiele). We started in Dropbox, but that is, as usually, quite bad in intensive writing. In principle we could use other tools we use already anyway, GitHub or SVN, but the same problem remains that it would be very convenient to see what others are editing and use some clear system for commenting.I personally like to write this kind of simple things in Markdown. It has several advantages over LaTeX. It is easy, fast to type and allows good connection with bibtex bibliography. So I started to think whether there is some way to combine the best of both worlds. I know there are some other collaborative editors for Markdown itself, but there were some other reasons to stick to Google Docs. I have one colleague with who I collaborate regularly, who uses ChromeBook as his main computer. Thereby for him it is the best to stick into that. And this means that for me it is the best to figure out some ways to use Google Docs more effectively.The workflow presented here was inspired by this blogpost by Eric P. Green, though it is not at all that sophisticated.All code is stored in a GitHub repository, but I go it through here piece by piece. Here are the steps that come.  Create a YAML header  Download text from Google Docs  Remove mysterious NUL character from the beginning of file  Delete the comments that may be present  Combine the header and the text  Write those into a markdown document  Render HTML  Render PDFIt is really very simple. The idea is to read data directly from Google Docs. And it allows this:To be turned into something like this:Or into an HTML page, or into .docx file, or .epub, or basically into anything Pandoc supports. So let’s go through step by step how this works.The headerHeader is a simple block of YAML. We are telling it the date, author, title, the location of a bibliography and other such details. It depends a bit from our desired output format what we want to have here, as we can also pass many of these settings directly into Pandoc. Here we just save the header as a character string.header &lt;- &#39;---title: &quot;Collaborative authoring in Google Docs&quot;author: &quot;Niko Partanen&quot;date: &quot;19 Jun 2015&quot;pdf_document:        keep_tex: yesbibliography: ./bibtex/FRibliography_example.bib---&#39;Reading the fileThen we read the file from Google Docs and write it as a file. The link to Google Docs is very easy to generate. You can get the document ID from the link you use to share it.The structure is like this:https://docs.google.com/document/d/put-id-here/export?format=txtOne could have there also some other format, but a simple text file is the best for now.library(readr)doc &lt;- read_file(&quot;https://docs.google.com/document/d/1D1C_79nLDM25r96dWinufVUd70-ipsHzv6cK-9cK-Io/export?format=txt&quot;)fileConn &lt;- file(&quot;temp.txt&quot;)writeLines(doc, fileConn)close(fileConn)Removing the NUL characterFor some reason the text file contains a NUL character in the beginning of the first line. I don’t understand at all what it is doing there, but R, LaTeX and Pandoc are all giving errors for it later, so having it around is unacceptable. I was trying to find out how to delete it for quite some time, and ended up to do it from Terminal, by simply removing those first bytes.system(&quot;cat temp.txt | tail -c +4 &gt; temp_clean.txt&quot;)doc &lt;- read_file(&quot;temp_clean.txt&quot;)I would be very happy to know if there is some easier way to do this!Removing the commentsIt is possible that there are some comments left into the document. They have formatting like [a] or [b] in the text, and the actual comment text comes to the end. I assume there could be some way to turn them into footnotes in the PDF, but at the moment I just want to delete them.doc &lt;- gsub(&quot;(.+## References).+&quot;, &quot;\\1&quot;, doc)doc &lt;- gsub(&quot;\\[.\\]&quot;, &quot;&quot;, doc)Putting it togetherThen we simply paste together the header and the document. This is then written into a new Markdown document.full_paper &lt;- paste0(header, doc)fileConn &lt;- file(&quot;example.md&quot;)writeLines(full_paper, fileConn)close(fileConn)Converting the filesAfter this we can start to convert the file. Now I convert it into HTML and PDF. Note for linguists: The default fonts used here are not very good for any exotic script. There are lots of situations where the basic fonts in principle can handle what you have there, but in some specific situations (such as within a code block) the font in that environment doesn’t have what you need. Well, this is how the things always are with typography and lesser used languages. But remember to play with Pandoc font settings if you have any non-latin stuff there.library(rmarkdown)render(&#39;example.md&#39;, output_format = &quot;html_document&quot;)system(&quot;pandoc example.md --latex-engine=xelatex --biblio ./bibtex/FRibliography_example.bib -o example.pdf --variable mainfont=Georgia&quot;)We can even turn it into an EPUB! Not that this would be necessary, but it is possible! I like epubs a lot, not really for scientific texts, but for normal books they are pleasant to use.system(&quot;pandoc example.md --biblio ./bibtex/FRibliography_example.bib -o example.epub&quot;)Now there are already some font issues rising their ugly heads…As the last thing I also convert the PDF into a picture used in the beginning of this post. It uses free program ImageMagick.system(&quot;convert -density 300  example.pdf example.png&quot;)The script can be downloaded in one piece from here."
    } ,
  
    {
      "title"    : "Moving files in Terminal",
      "category" : "",
      "tags"     : "Terminal",
      "url"      : "/2015/05/19/moving_files.html",
      "date"     : "2015-05-19 01:55:14 +0200",
      "content"  : "It is very common that we have a large amount of files in one folder, and then for whatever reason we decide that we would need to create for each filename a unique folder, where the different files sharing same name but different endings could reside. I had recently lots of ELAN files which I wanted to move into their own directories. I believe this is a very common situation, so I wanted to share it.  It can be done with these three commands. Just copy paste them one by one to the Terminal.First command: This makes the directories with the name of each ELAN filels | grep '\.eaf$' | sed 's/.eaf//g' | xargs mkdirSecond command: This uses grep to pick all ELAN files, then creates variables for different things and repeats the move for each file#!/bin/bashfor file in `ls | grep '\.eaf$'`do    SESSIONNAME=$(echo $file | sed 's/.eaf//g')    MOVFILE="$file"    MOVDESTINATION="./$SESSIONNAME/$file"    /bin/mv $MOVFILE $MOVDESTINATION;doneThird command: This does exactly the same as the second but for pfsx files.#!/bin/bashfor file in `ls | grep '\.pfsx$'`do    SESSIONNAME=$(echo $file | sed 's/.pfsx//g')    MOVFILE="$file"    MOVDESTINATION="./$SESSIONNAME/$file"    /bin/mv $MOVFILE $MOVDESTINATION;doneI did the same recently with a folder full of mp3 and wav files. The model is identical, just the filename differs. This can be a convenient way to rearrange messy file structure, just to start dragging everything into one folder and move onward with commands like these. This also forces to check that all files are consistently named, which is of course necessary for well structured corpus."
    } ,
  
    {
      "title"    : "Welcome to the site",
      "category" : "",
      "tags"     : "",
      "url"      : "/2015/05/17/langdoc.html",
      "date"     : "2015-05-17 01:55:14 +0200",
      "content"  : "While we document the endangered languages of the world there is quite a lot to do. Data quality, data content, connection with the speech communities, managing different audio and video files – this is in many ways extremely difficult job to do. One would assume that the technical solutions which we use would had been designed to make this work as easy as possible. Somehow this does not seem to be the case. Technology is just a tool, our real questions are about the languages.How often do we update our archived data? I think it is often done maybe every half a year, just because the uploading process is so inconvenient, slow and unreliable. I’m certain this is not intentional. Surely everyone has done their part well and the tools are designed to work in the best possible manner. But something has gone wrong.Filling metadata should be so easy that one does it just for joy of keeping things ordered the easiest possible way. Similarly, archiving should be so easy that one just syncs the newest files in the end of the day. Press a button, collect your stuff, tidy your desk – beep – sync done. Repeat every day you do something with your data.This should be possible with current technology. We believe this doesn’t need to be so difficult. There are better solutions for almost any aspect of our digital data management, and we are going to figure out what those are.At times the tools we need do not exist. But then we have to build them. Luckily, programming nowadays has started to remind more and more building with Legos. There are so many packages and modules for all kinds of languages (R, Python, Ruby – whatever one needs) floating around GitHub and other repositories that often 70% of the work is already done. It’s just about combining those pieces together in a way that contributes to language documentation workflow.This site, LangDoc, has been built in order to disseminate our ideas and practices. It is divided into individual blogposts. We will also have independent daughter sites for specific projects and datasets."
    } 
  
  ,
  
   {
     
        "title"    : "About",
        "category" : "",
        "tags"     : "",
        "url"      : "/about/",
        "date"     : "",
        "content"  : "You can find the source code of this page from github.com/langdoc. Our goal is that LangDoc site would gather different modern solutions to language documentation, and help to disseminate the best practices.Idea is that the tools for different workflows would be directly accessible in their own GitHub repositories. This also allows more collaborative work and discussion around them, as an example, in the form of GitHub issues.Please contact us if you have any questions. The contact information is below.LicenceCC-BY"
     
   } ,
  
   {
     
        "title"    : "Categories",
        "category" : "",
        "tags"     : "",
        "url"      : "/categories.html",
        "date"     : "",
        "content"  : "CategoriesTerminal                                                  Moving files in Terminal                      R                                                  Google Docs and Markdown                      workflows                                                  Google Docs and Markdown                      "
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
        "title"    : "Search",
        "category" : "",
        "tags"     : "",
        "url"      : "/search/",
        "date"     : "",
        "content"  : ""
     
   } ,
  
   {
     
   } ,
  
   {
     
   } 
  
]
